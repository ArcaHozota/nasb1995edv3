/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Indexes;
import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.Hymns.HymnsPath;
import app.preach.gospel.jooq.tables.Roles.RolesPath;
import app.preach.gospel.jooq.tables.records.StudentsRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Students extends TableImpl<StudentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.students</code>
     */
    public static final Students STUDENTS = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentsRecord> getRecordType() {
        return StudentsRecord.class;
    }

    /**
     * The column <code>public.students.id</code>. ID
     */
    public final TableField<StudentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::bigint"), SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>public.students.login_account</code>. アカウント
     */
    public final TableField<StudentsRecord, String> LOGIN_ACCOUNT = createField(DSL.name("login_account"), SQLDataType.VARCHAR(40).nullable(false), this, "アカウント");

    /**
     * The column <code>public.students.password</code>. パスワード
     */
    public final TableField<StudentsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "パスワード");

    /**
     * The column <code>public.students.username</code>. ユーザ名称
     */
    public final TableField<StudentsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(40).nullable(false), this, "ユーザ名称");

    /**
     * The column <code>public.students.date_of_birth</code>. 生年月日
     */
    public final TableField<StudentsRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE.nullable(false), this, "生年月日");

    /**
     * The column <code>public.students.email</code>. メール
     */
    public final TableField<StudentsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(60), this, "メール");

    /**
     * The column <code>public.students.role_id</code>. 役割ID
     */
    public final TableField<StudentsRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "役割ID");

    /**
     * The column <code>public.students.updated_time</code>. 登録時間
     */
    public final TableField<StudentsRecord, OffsetDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "登録時間");

    /**
     * The column <code>public.students.visible_flg</code>. 論理削除フラグ
     */
    public final TableField<StudentsRecord, Boolean> VISIBLE_FLG = createField(DSL.name("visible_flg"), SQLDataType.BOOLEAN.nullable(false), this, "論理削除フラグ");

    private Students(Name alias, Table<StudentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Students(Name alias, Table<StudentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.students</code> table reference
     */
    public Students(String alias) {
        this(DSL.name(alias), STUDENTS);
    }

    /**
     * Create an aliased <code>public.students</code> table reference
     */
    public Students(Name alias) {
        this(alias, STUDENTS);
    }

    /**
     * Create a <code>public.students</code> table reference
     */
    public Students() {
        this(DSL.name("students"), null);
    }

    public <O extends Record> Students(Table<O> path, ForeignKey<O, StudentsRecord> childPath, InverseForeignKey<O, StudentsRecord> parentPath) {
        super(path, childPath, parentPath, STUDENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StudentsPath extends Students implements Path<StudentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StudentsPath(Table<O> path, ForeignKey<O, StudentsRecord> childPath, InverseForeignKey<O, StudentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StudentsPath(Name alias, Table<StudentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StudentsPath as(String alias) {
            return new StudentsPath(DSL.name(alias), this);
        }

        @Override
        public StudentsPath as(Name alias) {
            return new StudentsPath(alias, this);
        }

        @Override
        public StudentsPath as(Table<?> alias) {
            return new StudentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STUDENT_EMAIL, Indexes.STUDENT_LOGIN_ACCOUNT);
    }

    @Override
    public UniqueKey<StudentsRecord> getPrimaryKey() {
        return Keys.STUDENT_PKEY;
    }

    @Override
    public List<ForeignKey<StudentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENTS__STUDENTS_ROLES_ROLED);
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.STUDENTS__STUDENTS_ROLES_ROLED, null);

        return _roles;
    }

    private transient HymnsPath _hymns;

    /**
     * Get the implicit to-many join path to the <code>public.hymns</code> table
     */
    public HymnsPath hymns() {
        if (_hymns == null)
            _hymns = new HymnsPath(this, null, Keys.HYMNS__HYMNS_STUDENTS_UPDATED_HYMNS.getInverseKey());

        return _hymns;
    }

    @Override
    public Students as(String alias) {
        return new Students(DSL.name(alias), this);
    }

    @Override
    public Students as(Name alias) {
        return new Students(alias, this);
    }

    @Override
    public Students as(Table<?> alias) {
        return new Students(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Name name) {
        return new Students(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Table<?> name) {
        return new Students(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students where(Condition condition) {
        return new Students(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Students where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Students where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Students where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Students where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Students whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
