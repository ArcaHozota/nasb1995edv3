/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables.records;


import app.preach.gospel.jooq.tables.HymnsWork;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HymnsWorkRecord extends UpdatableRecordImpl<HymnsWorkRecord> implements Record6<Long, Long, byte[], String, OffsetDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.hymns_work.id</code>. ID
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.hymns_work.id</code>. ID
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.hymns_work.work_id</code>. ワークID
     */
    public void setWorkId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.hymns_work.work_id</code>. ワークID
     */
    public Long getWorkId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.hymns_work.score</code>. 楽譜
     */
    public void setScore(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.hymns_work.score</code>. 楽譜
     */
    public byte[] getScore() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.hymns_work.name_jp_rational</code>. 日本語名称
     */
    public void setNameJpRational(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.hymns_work.name_jp_rational</code>. 日本語名称
     */
    public String getNameJpRational() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.hymns_work.updated_time</code>. 更新時間
     */
    public void setUpdatedTime(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.hymns_work.updated_time</code>. 更新時間
     */
    public OffsetDateTime getUpdatedTime() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.hymns_work.biko</code>. 備考
     */
    public void setBiko(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.hymns_work.biko</code>. 備考
     */
    public String getBiko() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, byte[], String, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, byte[], String, OffsetDateTime, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return HymnsWork.HYMNS_WORK.ID;
    }

    @Override
    public Field<Long> field2() {
        return HymnsWork.HYMNS_WORK.WORK_ID;
    }

    @Override
    public Field<byte[]> field3() {
        return HymnsWork.HYMNS_WORK.SCORE;
    }

    @Override
    public Field<String> field4() {
        return HymnsWork.HYMNS_WORK.NAME_JP_RATIONAL;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return HymnsWork.HYMNS_WORK.UPDATED_TIME;
    }

    @Override
    public Field<String> field6() {
        return HymnsWork.HYMNS_WORK.BIKO;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getWorkId();
    }

    @Override
    public byte[] component3() {
        return getScore();
    }

    @Override
    public String component4() {
        return getNameJpRational();
    }

    @Override
    public OffsetDateTime component5() {
        return getUpdatedTime();
    }

    @Override
    public String component6() {
        return getBiko();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getWorkId();
    }

    @Override
    public byte[] value3() {
        return getScore();
    }

    @Override
    public String value4() {
        return getNameJpRational();
    }

    @Override
    public OffsetDateTime value5() {
        return getUpdatedTime();
    }

    @Override
    public String value6() {
        return getBiko();
    }

    @Override
    public HymnsWorkRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public HymnsWorkRecord value2(Long value) {
        setWorkId(value);
        return this;
    }

    @Override
    public HymnsWorkRecord value3(byte[] value) {
        setScore(value);
        return this;
    }

    @Override
    public HymnsWorkRecord value4(String value) {
        setNameJpRational(value);
        return this;
    }

    @Override
    public HymnsWorkRecord value5(OffsetDateTime value) {
        setUpdatedTime(value);
        return this;
    }

    @Override
    public HymnsWorkRecord value6(String value) {
        setBiko(value);
        return this;
    }

    @Override
    public HymnsWorkRecord values(Long value1, Long value2, byte[] value3, String value4, OffsetDateTime value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HymnsWorkRecord
     */
    public HymnsWorkRecord() {
        super(HymnsWork.HYMNS_WORK);
    }

    /**
     * Create a detached, initialised HymnsWorkRecord
     */
    public HymnsWorkRecord(Long id, Long workId, byte[] score, String nameJpRational, OffsetDateTime updatedTime, String biko) {
        super(HymnsWork.HYMNS_WORK);

        setId(id);
        setWorkId(workId);
        setScore(score);
        setNameJpRational(nameJpRational);
        setUpdatedTime(updatedTime);
        setBiko(biko);
        resetChangedOnNotNull();
    }
}
