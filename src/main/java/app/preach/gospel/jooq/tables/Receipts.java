/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.records.ReceiptsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * レシート
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Receipts extends TableImpl<ReceiptsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.receipts</code>
     */
    public static final Receipts RECEIPTS = new Receipts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReceiptsRecord> getRecordType() {
        return ReceiptsRecord.class;
    }

    /**
     * The column <code>public.receipts.id</code>.
     */
    public final TableField<ReceiptsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.receipts.tennpyoh_banngoh</code>.
     */
    public final TableField<ReceiptsRecord, Long> TENNPYOH_BANNGOH = createField(DSL.name("tennpyoh_banngoh"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.receipts.mise</code>.
     */
    public final TableField<ReceiptsRecord, String> MISE = createField(DSL.name("mise"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.receipts.kinngaku</code>.
     */
    public final TableField<ReceiptsRecord, Float> KINNGAKU = createField(DSL.name("kinngaku"), SQLDataType.REAL.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.REAL)), this, "");

    /**
     * The column <code>public.receipts.jikann</code>.
     */
    public final TableField<ReceiptsRecord, LocalDateTime> JIKANN = createField(DSL.name("jikann"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.receipts.district</code>.
     */
    public final TableField<ReceiptsRecord, String> DISTRICT = createField(DSL.name("district"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.receipts.biko</code>.
     */
    public final TableField<ReceiptsRecord, String> BIKO = createField(DSL.name("biko"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.receipts.category</code>.
     */
    public final TableField<ReceiptsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Receipts(Name alias, Table<ReceiptsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Receipts(Name alias, Table<ReceiptsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("レシート"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.receipts</code> table reference
     */
    public Receipts(String alias) {
        this(DSL.name(alias), RECEIPTS);
    }

    /**
     * Create an aliased <code>public.receipts</code> table reference
     */
    public Receipts(Name alias) {
        this(alias, RECEIPTS);
    }

    /**
     * Create a <code>public.receipts</code> table reference
     */
    public Receipts() {
        this(DSL.name("receipts"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReceiptsRecord> getPrimaryKey() {
        return Keys.RECEIPTS_PKEY;
    }

    @Override
    public Receipts as(String alias) {
        return new Receipts(DSL.name(alias), this);
    }

    @Override
    public Receipts as(Name alias) {
        return new Receipts(alias, this);
    }

    @Override
    public Receipts as(Table<?> alias) {
        return new Receipts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(String name) {
        return new Receipts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(Name name) {
        return new Receipts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Receipts rename(Table<?> name) {
        return new Receipts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts where(Condition condition) {
        return new Receipts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Receipts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Receipts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Receipts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Receipts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Receipts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
