/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.records.BooksRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Books extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.books</code>
     */
    public static final Books BOOKS = new Books();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>public.books.id</code>. 書別ID
     */
    public final TableField<BooksRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::smallint"), SQLDataType.SMALLINT)), this, "書別ID");

    /**
     * The column <code>public.books.name</code>. 書別名
     */
    public final TableField<BooksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(33).nullable(false), this, "書別名");

    /**
     * The column <code>public.books.name_jp</code>. 書別日本語名
     */
    public final TableField<BooksRecord, String> NAME_JP = createField(DSL.name("name_jp"), SQLDataType.VARCHAR(33).nullable(false), this, "書別日本語名");

    private Books(Name alias, Table<BooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Books(Name alias, Table<BooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public Books(String alias) {
        this(DSL.name(alias), BOOKS);
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public Books(Name alias) {
        this(alias, BOOKS);
    }

    /**
     * Create a <code>public.books</code> table reference
     */
    public Books() {
        this(DSL.name("books"), null);
    }

    public <O extends Record> Books(Table<O> child, ForeignKey<O, BooksRecord> key) {
        super(child, key, BOOKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.BOOKS_PKEY;
    }

    @Override
    public Books as(String alias) {
        return new Books(DSL.name(alias), this);
    }

    @Override
    public Books as(Name alias) {
        return new Books(alias, this);
    }

    @Override
    public Books as(Table<?> alias) {
        return new Books(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(String name) {
        return new Books(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(Name name) {
        return new Books(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(Table<?> name) {
        return new Books(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Short, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Short, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
