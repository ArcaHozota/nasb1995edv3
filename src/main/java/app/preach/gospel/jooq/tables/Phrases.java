/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.records.PhrasesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Phrases extends TableImpl<PhrasesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.phrases</code>
     */
    public static final Phrases PHRASES = new Phrases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhrasesRecord> getRecordType() {
        return PhrasesRecord.class;
    }

    /**
     * The column <code>public.phrases.id</code>. 節ID
     */
    public final TableField<PhrasesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::bigint"), SQLDataType.BIGINT)), this, "節ID");

    /**
     * The column <code>public.phrases.name</code>. 節名称
     */
    public final TableField<PhrasesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(33).nullable(false), this, "節名称");

    /**
     * The column <code>public.phrases.text_en</code>. 内容
     */
    public final TableField<PhrasesRecord, String> TEXT_EN = createField(DSL.name("text_en"), SQLDataType.CLOB.nullable(false), this, "内容");

    /**
     * The column <code>public.phrases.text_jp</code>. 日本語内容
     */
    public final TableField<PhrasesRecord, String> TEXT_JP = createField(DSL.name("text_jp"), SQLDataType.CLOB.nullable(false), this, "日本語内容");

    /**
     * The column <code>public.phrases.chapter_id</code>. 章節ID
     */
    public final TableField<PhrasesRecord, Integer> CHAPTER_ID = createField(DSL.name("chapter_id"), SQLDataType.INTEGER.nullable(false), this, "章節ID");

    /**
     * The column <code>public.phrases.change_line</code>. 改行フラグ
     */
    public final TableField<PhrasesRecord, Boolean> CHANGE_LINE = createField(DSL.name("change_line"), SQLDataType.BOOLEAN.nullable(false), this, "改行フラグ");

    private Phrases(Name alias, Table<PhrasesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phrases(Name alias, Table<PhrasesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.phrases</code> table reference
     */
    public Phrases(String alias) {
        this(DSL.name(alias), PHRASES);
    }

    /**
     * Create an aliased <code>public.phrases</code> table reference
     */
    public Phrases(Name alias) {
        this(alias, PHRASES);
    }

    /**
     * Create a <code>public.phrases</code> table reference
     */
    public Phrases() {
        this(DSL.name("phrases"), null);
    }

    public <O extends Record> Phrases(Table<O> child, ForeignKey<O, PhrasesRecord> key) {
        super(child, key, PHRASES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PhrasesRecord> getPrimaryKey() {
        return Keys.PHRASES_PKEY;
    }

    @Override
    public List<ForeignKey<PhrasesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PHRASES__PHRASES_CHAPTERS_TO_PHRASE);
    }

    private transient Chapters _chapters;

    /**
     * Get the implicit join path to the <code>public.chapters</code> table.
     */
    public Chapters chapters() {
        if (_chapters == null)
            _chapters = new Chapters(this, Keys.PHRASES__PHRASES_CHAPTERS_TO_PHRASE);

        return _chapters;
    }

    @Override
    public Phrases as(String alias) {
        return new Phrases(DSL.name(alias), this);
    }

    @Override
    public Phrases as(Name alias) {
        return new Phrases(alias, this);
    }

    @Override
    public Phrases as(Table<?> alias) {
        return new Phrases(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phrases rename(String name) {
        return new Phrases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phrases rename(Name name) {
        return new Phrases(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phrases rename(Table<?> name) {
        return new Phrases(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, Integer, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
