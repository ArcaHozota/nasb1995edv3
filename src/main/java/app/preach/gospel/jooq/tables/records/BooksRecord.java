/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables.records;


import app.preach.gospel.jooq.tables.Books;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record3<Short, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.books.id</code>. 書別ID
     */
    public void setId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.books.id</code>. 書別ID
     */
    public Short getId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.books.name</code>. 書別名
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.books.name</code>. 書別名
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.books.name_jp</code>. 書別日本語名
     */
    public void setNameJp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.books.name_jp</code>. 書別日本語名
     */
    public String getNameJp() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Short, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return Books.BOOKS.ID;
    }

    @Override
    public Field<String> field2() {
        return Books.BOOKS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Books.BOOKS.NAME_JP;
    }

    @Override
    public Short component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getNameJp();
    }

    @Override
    public Short value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getNameJp();
    }

    @Override
    public BooksRecord value1(Short value) {
        setId(value);
        return this;
    }

    @Override
    public BooksRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public BooksRecord value3(String value) {
        setNameJp(value);
        return this;
    }

    @Override
    public BooksRecord values(Short value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Short id, String name, String nameJp) {
        super(Books.BOOKS);

        setId(id);
        setName(name);
        setNameJp(nameJp);
        resetChangedOnNotNull();
    }
}
