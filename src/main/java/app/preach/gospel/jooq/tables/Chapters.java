/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.Books.BooksPath;
import app.preach.gospel.jooq.tables.Phrases.PhrasesPath;
import app.preach.gospel.jooq.tables.records.ChaptersRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chapters extends TableImpl<ChaptersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chapters</code>
     */
    public static final Chapters CHAPTERS = new Chapters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChaptersRecord> getRecordType() {
        return ChaptersRecord.class;
    }

    /**
     * The column <code>public.chapters.id</code>. 章節ID
     */
    public final TableField<ChaptersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "章節ID");

    /**
     * The column <code>public.chapters.name</code>. 章節名
     */
    public final TableField<ChaptersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(33).nullable(false), this, "章節名");

    /**
     * The column <code>public.chapters.name_jp</code>. 章節日本語名
     */
    public final TableField<ChaptersRecord, String> NAME_JP = createField(DSL.name("name_jp"), SQLDataType.VARCHAR(33).nullable(false), this, "章節日本語名");

    /**
     * The column <code>public.chapters.book_id</code>. 書別ID
     */
    public final TableField<ChaptersRecord, Short> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.SMALLINT.nullable(false), this, "書別ID");

    private Chapters(Name alias, Table<ChaptersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Chapters(Name alias, Table<ChaptersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.chapters</code> table reference
     */
    public Chapters(String alias) {
        this(DSL.name(alias), CHAPTERS);
    }

    /**
     * Create an aliased <code>public.chapters</code> table reference
     */
    public Chapters(Name alias) {
        this(alias, CHAPTERS);
    }

    /**
     * Create a <code>public.chapters</code> table reference
     */
    public Chapters() {
        this(DSL.name("chapters"), null);
    }

    public <O extends Record> Chapters(Table<O> path, ForeignKey<O, ChaptersRecord> childPath, InverseForeignKey<O, ChaptersRecord> parentPath) {
        super(path, childPath, parentPath, CHAPTERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChaptersPath extends Chapters implements Path<ChaptersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChaptersPath(Table<O> path, ForeignKey<O, ChaptersRecord> childPath, InverseForeignKey<O, ChaptersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChaptersPath(Name alias, Table<ChaptersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChaptersPath as(String alias) {
            return new ChaptersPath(DSL.name(alias), this);
        }

        @Override
        public ChaptersPath as(Name alias) {
            return new ChaptersPath(alias, this);
        }

        @Override
        public ChaptersPath as(Table<?> alias) {
            return new ChaptersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ChaptersRecord> getPrimaryKey() {
        return Keys.CHAPTERS_PKEY;
    }

    @Override
    public List<ForeignKey<ChaptersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAPTERS__CHAPTERS_BOOKS_TO_CHAPTER);
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.CHAPTERS__CHAPTERS_BOOKS_TO_CHAPTER, null);

        return _books;
    }

    private transient PhrasesPath _phrases;

    /**
     * Get the implicit to-many join path to the <code>public.phrases</code>
     * table
     */
    public PhrasesPath phrases() {
        if (_phrases == null)
            _phrases = new PhrasesPath(this, null, Keys.PHRASES__PHRASES_CHAPTERS_TO_PHRASE.getInverseKey());

        return _phrases;
    }

    @Override
    public Chapters as(String alias) {
        return new Chapters(DSL.name(alias), this);
    }

    @Override
    public Chapters as(Name alias) {
        return new Chapters(alias, this);
    }

    @Override
    public Chapters as(Table<?> alias) {
        return new Chapters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(String name) {
        return new Chapters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(Name name) {
        return new Chapters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(Table<?> name) {
        return new Chapters(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters where(Condition condition) {
        return new Chapters(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chapters where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chapters where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chapters where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Chapters where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Chapters whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
