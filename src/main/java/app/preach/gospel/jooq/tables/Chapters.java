/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.records.ChaptersRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chapters extends TableImpl<ChaptersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chapters</code>
     */
    public static final Chapters CHAPTERS = new Chapters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChaptersRecord> getRecordType() {
        return ChaptersRecord.class;
    }

    /**
     * The column <code>public.chapters.id</code>. 章節ID
     */
    public final TableField<ChaptersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "章節ID");

    /**
     * The column <code>public.chapters.name</code>. 章節名
     */
    public final TableField<ChaptersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(33).nullable(false), this, "章節名");

    /**
     * The column <code>public.chapters.name_jp</code>. 章節日本語名
     */
    public final TableField<ChaptersRecord, String> NAME_JP = createField(DSL.name("name_jp"), SQLDataType.VARCHAR(33).nullable(false), this, "章節日本語名");

    /**
     * The column <code>public.chapters.book_id</code>. 書別ID
     */
    public final TableField<ChaptersRecord, Short> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.SMALLINT.nullable(false), this, "書別ID");

    private Chapters(Name alias, Table<ChaptersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chapters(Name alias, Table<ChaptersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chapters</code> table reference
     */
    public Chapters(String alias) {
        this(DSL.name(alias), CHAPTERS);
    }

    /**
     * Create an aliased <code>public.chapters</code> table reference
     */
    public Chapters(Name alias) {
        this(alias, CHAPTERS);
    }

    /**
     * Create a <code>public.chapters</code> table reference
     */
    public Chapters() {
        this(DSL.name("chapters"), null);
    }

    public <O extends Record> Chapters(Table<O> child, ForeignKey<O, ChaptersRecord> key) {
        super(child, key, CHAPTERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ChaptersRecord> getPrimaryKey() {
        return Keys.CHAPTERS_PKEY;
    }

    @Override
    public List<ForeignKey<ChaptersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAPTERS__CHAPTERS_BOOKS_TO_CHAPTER);
    }

    private transient Books _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public Books books() {
        if (_books == null)
            _books = new Books(this, Keys.CHAPTERS__CHAPTERS_BOOKS_TO_CHAPTER);

        return _books;
    }

    @Override
    public Chapters as(String alias) {
        return new Chapters(DSL.name(alias), this);
    }

    @Override
    public Chapters as(Name alias) {
        return new Chapters(alias, this);
    }

    @Override
    public Chapters as(Table<?> alias) {
        return new Chapters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(String name) {
        return new Chapters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(Name name) {
        return new Chapters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chapters rename(Table<?> name) {
        return new Chapters(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
