/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Indexes;
import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.records.HymnsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Hymns extends TableImpl<HymnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hymns</code>
     */
    public static final Hymns HYMNS = new Hymns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HymnsRecord> getRecordType() {
        return HymnsRecord.class;
    }

    /**
     * The column <code>public.hymns.id</code>. ID
     */
    public final TableField<HymnsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("'0'::bigint"), SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>public.hymns.name_jp</code>. 日本語名称
     */
    public final TableField<HymnsRecord, String> NAME_JP = createField(DSL.name("name_jp"), SQLDataType.VARCHAR(66).nullable(false), this, "日本語名称");

    /**
     * The column <code>public.hymns.name_kr</code>. 韓国語名称
     */
    public final TableField<HymnsRecord, String> NAME_KR = createField(DSL.name("name_kr"), SQLDataType.VARCHAR(66).nullable(false), this, "韓国語名称");

    /**
     * The column <code>public.hymns.link</code>. リンク
     */
    public final TableField<HymnsRecord, String> LINK = createField(DSL.name("link"), SQLDataType.VARCHAR(255), this, "リンク");

    /**
     * The column <code>public.hymns.updated_time</code>. 更新時間
     */
    public final TableField<HymnsRecord, OffsetDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "更新時間");

    /**
     * The column <code>public.hymns.updated_user</code>. 更新者ID
     */
    public final TableField<HymnsRecord, Long> UPDATED_USER = createField(DSL.name("updated_user"), SQLDataType.BIGINT.nullable(false), this, "更新者ID");

    /**
     * The column <code>public.hymns.serif</code>. 歌詞
     */
    public final TableField<HymnsRecord, String> SERIF = createField(DSL.name("serif"), SQLDataType.CLOB, this, "歌詞");

    /**
     * The column <code>public.hymns.visible_flg</code>. 論理削除フラグ
     */
    public final TableField<HymnsRecord, Boolean> VISIBLE_FLG = createField(DSL.name("visible_flg"), SQLDataType.BOOLEAN.nullable(false), this, "論理削除フラグ");

    private Hymns(Name alias, Table<HymnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hymns(Name alias, Table<HymnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.hymns</code> table reference
     */
    public Hymns(String alias) {
        this(DSL.name(alias), HYMNS);
    }

    /**
     * Create an aliased <code>public.hymns</code> table reference
     */
    public Hymns(Name alias) {
        this(alias, HYMNS);
    }

    /**
     * Create a <code>public.hymns</code> table reference
     */
    public Hymns() {
        this(DSL.name("hymns"), null);
    }

    public <O extends Record> Hymns(Table<O> child, ForeignKey<O, HymnsRecord> key) {
        super(child, key, HYMNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HYMN_LINK, Indexes.HYMN_NAME_JP, Indexes.HYMN_NAME_KR);
    }

    @Override
    public UniqueKey<HymnsRecord> getPrimaryKey() {
        return Keys.HYMNS_PKEY;
    }

    @Override
    public List<ForeignKey<HymnsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HYMNS__HYMNS_STUDENTS_UPDATED_HYMNS);
    }

    private transient Students _students;

    /**
     * Get the implicit join path to the <code>public.students</code> table.
     */
    public Students students() {
        if (_students == null)
            _students = new Students(this, Keys.HYMNS__HYMNS_STUDENTS_UPDATED_HYMNS);

        return _students;
    }

    @Override
    public Hymns as(String alias) {
        return new Hymns(DSL.name(alias), this);
    }

    @Override
    public Hymns as(Name alias) {
        return new Hymns(alias, this);
    }

    @Override
    public Hymns as(Table<?> alias) {
        return new Hymns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hymns rename(String name) {
        return new Hymns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hymns rename(Name name) {
        return new Hymns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hymns rename(Table<?> name) {
        return new Hymns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, OffsetDateTime, Long, String, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
