/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables;


import app.preach.gospel.jooq.Keys;
import app.preach.gospel.jooq.Public;
import app.preach.gospel.jooq.tables.Authorities.AuthoritiesPath;
import app.preach.gospel.jooq.tables.Roles.RolesPath;
import app.preach.gospel.jooq.tables.records.RoleAuthRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RoleAuth extends TableImpl<RoleAuthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_auth</code>
     */
    public static final RoleAuth ROLE_AUTH = new RoleAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleAuthRecord> getRecordType() {
        return RoleAuthRecord.class;
    }

    /**
     * The column <code>public.role_auth.role_id</code>.
     */
    public final TableField<RoleAuthRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.role_auth.auth_id</code>.
     */
    public final TableField<RoleAuthRecord, Long> AUTH_ID = createField(DSL.name("auth_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private RoleAuth(Name alias, Table<RoleAuthRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RoleAuth(Name alias, Table<RoleAuthRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.role_auth</code> table reference
     */
    public RoleAuth(String alias) {
        this(DSL.name(alias), ROLE_AUTH);
    }

    /**
     * Create an aliased <code>public.role_auth</code> table reference
     */
    public RoleAuth(Name alias) {
        this(alias, ROLE_AUTH);
    }

    /**
     * Create a <code>public.role_auth</code> table reference
     */
    public RoleAuth() {
        this(DSL.name("role_auth"), null);
    }

    public <O extends Record> RoleAuth(Table<O> path, ForeignKey<O, RoleAuthRecord> childPath, InverseForeignKey<O, RoleAuthRecord> parentPath) {
        super(path, childPath, parentPath, ROLE_AUTH);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RoleAuthPath extends RoleAuth implements Path<RoleAuthRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RoleAuthPath(Table<O> path, ForeignKey<O, RoleAuthRecord> childPath, InverseForeignKey<O, RoleAuthRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RoleAuthPath(Name alias, Table<RoleAuthRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RoleAuthPath as(String alias) {
            return new RoleAuthPath(DSL.name(alias), this);
        }

        @Override
        public RoleAuthPath as(Name alias) {
            return new RoleAuthPath(alias, this);
        }

        @Override
        public RoleAuthPath as(Table<?> alias) {
            return new RoleAuthPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RoleAuthRecord> getPrimaryKey() {
        return Keys.ROLE_AUTH_PKEY;
    }

    @Override
    public List<ForeignKey<RoleAuthRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROLE_AUTH__ROLE_AUTH_AUTH_ID, Keys.ROLE_AUTH__ROLE_AUTH_ROLE_ID);
    }

    private transient AuthoritiesPath _authorities;

    /**
     * Get the implicit join path to the <code>public.authorities</code> table.
     */
    public AuthoritiesPath authorities() {
        if (_authorities == null)
            _authorities = new AuthoritiesPath(this, Keys.ROLE_AUTH__ROLE_AUTH_AUTH_ID, null);

        return _authorities;
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.ROLE_AUTH__ROLE_AUTH_ROLE_ID, null);

        return _roles;
    }

    @Override
    public RoleAuth as(String alias) {
        return new RoleAuth(DSL.name(alias), this);
    }

    @Override
    public RoleAuth as(Name alias) {
        return new RoleAuth(alias, this);
    }

    @Override
    public RoleAuth as(Table<?> alias) {
        return new RoleAuth(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleAuth rename(String name) {
        return new RoleAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleAuth rename(Name name) {
        return new RoleAuth(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleAuth rename(Table<?> name) {
        return new RoleAuth(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth where(Condition condition) {
        return new RoleAuth(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleAuth where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleAuth where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleAuth where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RoleAuth where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RoleAuth whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
