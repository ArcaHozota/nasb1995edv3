/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables.records;


import app.preach.gospel.jooq.tables.Chapters;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChaptersRecord extends UpdatableRecordImpl<ChaptersRecord> implements Record4<Integer, String, String, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.chapters.id</code>. 章節ID
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.chapters.id</code>. 章節ID
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.chapters.name</code>. 章節名
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.chapters.name</code>. 章節名
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.chapters.name_jp</code>. 章節日本語名
     */
    public void setNameJp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.chapters.name_jp</code>. 章節日本語名
     */
    public String getNameJp() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.chapters.book_id</code>. 書別ID
     */
    public void setBookId(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.chapters.book_id</code>. 書別ID
     */
    public Short getBookId() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Chapters.CHAPTERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Chapters.CHAPTERS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Chapters.CHAPTERS.NAME_JP;
    }

    @Override
    public Field<Short> field4() {
        return Chapters.CHAPTERS.BOOK_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getNameJp();
    }

    @Override
    public Short component4() {
        return getBookId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getNameJp();
    }

    @Override
    public Short value4() {
        return getBookId();
    }

    @Override
    public ChaptersRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ChaptersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ChaptersRecord value3(String value) {
        setNameJp(value);
        return this;
    }

    @Override
    public ChaptersRecord value4(Short value) {
        setBookId(value);
        return this;
    }

    @Override
    public ChaptersRecord values(Integer value1, String value2, String value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChaptersRecord
     */
    public ChaptersRecord() {
        super(Chapters.CHAPTERS);
    }

    /**
     * Create a detached, initialised ChaptersRecord
     */
    public ChaptersRecord(Integer id, String name, String nameJp, Short bookId) {
        super(Chapters.CHAPTERS);

        setId(id);
        setName(name);
        setNameJp(nameJp);
        setBookId(bookId);
        resetChangedOnNotNull();
    }
}
