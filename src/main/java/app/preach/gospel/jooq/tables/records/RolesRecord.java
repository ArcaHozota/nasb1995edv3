/*
 * This file is generated by jOOQ.
 */
package app.preach.gospel.jooq.tables.records;


import app.preach.gospel.jooq.tables.Roles;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RolesRecord extends UpdatableRecordImpl<RolesRecord> implements Record3<Long, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.roles.id</code>. ID
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.roles.id</code>. ID
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.roles.name</code>. 名称
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.roles.name</code>. 名称
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.roles.visible_flg</code>. 論理削除フラグ
     */
    public void setVisibleFlg(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.roles.visible_flg</code>. 論理削除フラグ
     */
    public Boolean getVisibleFlg() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Roles.ROLES.ID;
    }

    @Override
    public Field<String> field2() {
        return Roles.ROLES.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Roles.ROLES.VISIBLE_FLG;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getVisibleFlg();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getVisibleFlg();
    }

    @Override
    public RolesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RolesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public RolesRecord value3(Boolean value) {
        setVisibleFlg(value);
        return this;
    }

    @Override
    public RolesRecord values(Long value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RolesRecord
     */
    public RolesRecord() {
        super(Roles.ROLES);
    }

    /**
     * Create a detached, initialised RolesRecord
     */
    public RolesRecord(Long id, String name, Boolean visibleFlg) {
        super(Roles.ROLES);

        setId(id);
        setName(name);
        setVisibleFlg(visibleFlg);
        resetChangedOnNotNull();
    }
}
