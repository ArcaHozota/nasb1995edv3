// bstreeview.js – jQuery‑free rewrite (ES 2020+)
// =================================================
// Author: ChatGPT (o3 model) – 2025‑06‑01
// Original plugin by Sami Chniter (Apache 2.0)
// -------------------------------------------------
// (Optional) jQuery‑style convenience method
// -------------------------------------------------
// If you prefer to keep the old call‑site unchanged:
// document.getElementById('tree').bstreeview({...})
// just load this file once; the following snippet
// patches HTMLElement.prototype so the above works.
// -------------------------------------------------
if (!HTMLElement.prototype.bstreeview) {
  HTMLElement.prototype.bstreeview = function (options = {}) {
    return new BsTreeview(this, options);
  };
}

// -------------------------------------------------
//  • No jQuery dependency – uses modern DOM APIs only.
//  • Works with Bootstrap 5 Collapse (requires bootstrap.bundle.js).
//  • Exported as ESM class; if script tag is used without module, it also
//    attaches BsTreeview to the global object for UMD‑like convenience.
//
// Usage (module):
//   import { BsTreeview } from './bstreeview.js';
//   new BsTreeview('#myTree', { data: treeData });
//
// Usage (classic):
//   <script src="bootstrap.bundle.min.js"></script>
//   <script src="bstreeview.js"></script>
//   <script>
//     new window.BsTreeview(document.getElementById('myTree'), { data });
//   </script>

(function (global, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();          // CommonJS / Node
  } else if (typeof define === 'function' && define.amd) {
    define([], factory);                // AMD
  } else {
    global.BsTreeview = factory();       // Browser global
  }
})(typeof window !== 'undefined' ? window : this, function () {
  'use strict';

  /** @typedef {{
   *  text: string,
   *  icon?: string,
   *  href?: string,
   *  class?: string,
   *  id?: string,
   *  expanded?: boolean,
   *  nodes?: NodeData[]
   * }} NodeData */

  /** Default options */
  const DEFAULTS = {
    expandIcon: 'fa fa-angle-down fa-fw',
    collapseIcon: 'fa fa-angle-right fa-fw',
    expandClass: 'show',
    indent: 1.25,                  // rem
    parentsMarginLeft: '1.25rem',
    openNodeLinkOnNewTab: true,
    data: []                       /** @type {NodeData[]} */
  };

  /** Utility ----------------------------------------------------------- */

  /**
   * Converts HTML string to Element.
   * @param {string} html
   */
  function htmlToElement (html) {
    const template = document.createElement('template');
    template.innerHTML = html.trim();
    return template.content.firstElementChild;
  }

  /**
   * Toggle Bootstrap collapse element without jQuery.
   * (Requires bootstrap.bundle.js so Collapse class is globally available.)
   */
  function toggleCollapseById (id) {
    const el = document.querySelector(id);
    if (!el) return;
    if (typeof bootstrap !== 'undefined' && bootstrap.Collapse) {
      // Use BS API if present – keeps ARIA attributes in sync
      const instance = bootstrap.Collapse.getOrCreateInstance(el, { toggle: false });
      instance.toggle();
    } else {
      el.classList.toggle('show');
    }
  }

  /** Class ------------------------------------------------------------- */

  class BsTreeview {
    /**
     * @param {string|HTMLElement} element  Root element or selector.
     * @param {Partial<typeof DEFAULTS>} [options]
     */
    constructor (element, options = {}) {
      // Element resolution
      this.element = typeof element === 'string' ? document.querySelector(element) : element;
      if (!this.element) throw new Error('BsTreeview: invalid element');

      this.settings = { ...DEFAULTS, ...options };
      /** @type {NodeData[]} */
      this.tree = Array.isArray(this.settings.data)
        ? JSON.parse(JSON.stringify(this.settings.data))
        : [];
      delete this.settings.data;

      this.itemIdPrefix = (this.element.id || 'bstree') + '-item-';
      this.nodes = [];

      this.element.classList.add('bstreeview');
      this._initData({ nodes: this.tree });
      this._build(this.element, this.tree, 0);
      this._attachEvents();
    }

    // ------------------------------------------------------------------
    // Private helpers

    /** Recursively enumerates nodes to assign IDs, parent refs */
    _initData (node) {
      if (!node.nodes) return;
      const parent = node;
      node.nodes.forEach(child => {
        child.nodeId = this.nodes.length;
        child.parentId = parent.nodeId;
        this.nodes.push(child);
        if (child.nodes) {
          this._initData(child);
        }
      });
    }

    /**
     * Recursively build DOM structure.
     * @param {HTMLElement} parentElement
     * @param {NodeData[]} nodes
     * @param {number} depth
     */
    _build (parentElement, nodes, depth) {
      const { indent, parentsMarginLeft, expandIcon, collapseIcon, expandClass } = this.settings;
      const leftPadding = depth === 0 ? parentsMarginLeft : `${indent + depth * indent}rem`;
      depth += 1;

      nodes.forEach(node => {
        // Tree item ----------------------------------------------------
        const treeItem = document.createElement('div');
        treeItem.setAttribute('role', 'treeitem');
        treeItem.classList.add('list-group-item');
        treeItem.style.paddingLeft = leftPadding;
        treeItem.dataset.bsTarget = `#${this.itemIdPrefix}${node.nodeId}`;

        // Expand / collapse icon --------------------------------------
        if (node.nodes) {
          const stateIcon = document.createElement('i');
          stateIcon.className = node.expanded ? expandIcon : collapseIcon;
          stateIcon.classList.add('state-icon');
          treeItem.appendChild(stateIcon);
        }

        // Node icon ----------------------------------------------------
        if (node.icon) {
          const itemIcon = document.createElement('i');
          itemIcon.className = `${node.icon} item-icon`;
          treeItem.appendChild(itemIcon);
        }

        // Text / link --------------------------------------------------
        if (node.href) {
          const anchor = document.createElement('a');
          anchor.textContent = node.text;
          anchor.href = node.href;
          treeItem.appendChild(anchor);
        } else {
          treeItem.append(node.text);
        }

        // Extra classes / id ------------------------------------------
        if (node.class) treeItem.classList.add(...node.class.split(/\s+/));
        if (node.id) treeItem.id = node.id;

        parentElement.appendChild(treeItem);

        // Children -----------------------------------------------------
        if (node.nodes) {
          const group = document.createElement('div');
          group.setAttribute('role', 'group');
          group.classList.add('list-group', 'collapse');
          group.id = `${this.itemIdPrefix}${node.nodeId}`;
          if (node.expanded) group.classList.add(expandClass);
          parentElement.appendChild(group);
          this._build(group, node.nodes, depth);
        }
      });
    }

    /** Click delegation handler */
    _attachEvents () {
      this.element.addEventListener('click', evt => {
        const item = evt.target.closest('.list-group-item');
        if (!item || !this.element.contains(item)) return;

        // Toggle icon classes if present
        const stateIcon = item.querySelector('.state-icon');
        if (stateIcon) {
          stateIcon.classList.toggle(this.settings.expandIcon);
          stateIcon.classList.toggle(this.settings.collapseIcon);
        }

        // Follow link if clicked anchor or item with href attribute
        if (evt.target.tagName === 'A' || item.hasAttribute('href')) {
          if (this.settings.openNodeLinkOnNewTab) {
            evt.preventDefault();
            window.open(item.getAttribute('href'), '_blank');
          }
          return; // Let browser handle normal navigation otherwise
        }

        // Otherwise, toggle the child group collapse
        const targetId = item.dataset.bsTarget;
        if (targetId) {
          toggleCollapseById(targetId);
        }
      });
    }

    // ------------------------------------------------------------------
    // Public helpers – small surface for now

    /** Expand all nodes */
    expandAll () {
      this.element.querySelectorAll('.list-group.collapse').forEach(el => {
        if (!el.classList.contains('show')) toggleCollapseById('#' + el.id);
      });
    }

    /** Collapse all nodes */
    collapseAll () {
      this.element.querySelectorAll('.list-group.collapse.show').forEach(el => {
        toggleCollapseById('#' + el.id);
      });
    }
  }

  // Named export for ESM environments
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    exports.BsTreeview = BsTreeview;
  }

  return BsTreeview;
});
